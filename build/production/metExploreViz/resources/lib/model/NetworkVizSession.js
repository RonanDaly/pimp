var NetworkVizSession=function(){this.active=false;this.activeMapping="";this.animated=false;this.colorMappings=[];this.displayNodeName="";this.duplicatedNodes=[];this.d3Data=new NetworkData();this.force=undefined;this.forceCentroids=undefined;this.groups=[];this.id="";this.linked=false;this.mapped="none";this.mappingDataType="";this.metabolites=[];this.nodesMap=[];this.reactions=[];this.resizable=false;this.selectedNodes=[]};NetworkVizSession.prototype={getGroupByKey:function(b){var a=metExploreD3.getGeneralStyle().isDisplayedConvexhulls();var c=null;if(a=="Compartments"){this.groups.forEach(function(d){if(d.key.identifier==b){c=d}})}else{this.groups.forEach(function(d){if(d.key==b){c=d}})}return c},getActiveMapping:function(){return this.activeMapping},setActiveMapping:function(a){this.activeMapping=a},getColorMappingsSet:function(){return this.colorMappings},getColorMappingById:function(b){var a=null;this.colorMappings.forEach(function(c){if(c.getName()==b){a=c}});return a},getColorMappingsSetLength:function(){return this.colorMappings.length},resetColorMapping:function(){this.colorMappings=[]},addColorMapping:function(b,a){this.colorMappings.push(new ColorMapping(b,a))},addSelectedNode:function(a){if(this.selectedNodes==undefined){this.selectedNodes=[]}this.selectedNodes.push(a)},addDuplicatedNode:function(a){if(this.duplicatedNodes==undefined){this.duplicatedNodes=[]}this.duplicatedNodes.push(a)},isAnimated:function(){return this.animated},setAnimated:function(a){this.animated=a},isActive:function(){return this.active},setActivity:function(a){this.active=a},addSelectedNodes:function(a){if(this.selectedNodes==undefined){this.selectedNodes=[]}for(n in a){this.selectedNodes.push(nodeId)}},addDuplicatedNodes:function(a){if(this.duplicatedNodes==undefined){this.duplicatedNodes=[]}for(n in a){this.duplicatedNodes.push(nodeId)}},reset:function(){this.emptyMetabolites();this.emptyReactions();this.selectedNodes=[];this.groups=[];this.nodesMap=[]},getId:function(){return this.id},setId:function(a){this.id=a;this.d3Data.setId(a)},getScale:function(){return this.scale},setScale:function(a){this.scale=a},getDisplayNodeName:function(){return this.displayNodeName},setDisplayNodeName:function(a){this.displayNodeName=a},getMetaboliteStyle:function(){return this.metaboliteStyle},setMetaboliteStyle:function(a){this.metaboliteStyle=a},getMappingDataType:function(){return this.mappingDataType},setMappingDataType:function(a){this.mappingDataType=a},isResizable:function(){return this.resizable},setResizable:function(a){this.resizable=a},isMapped:function(){return this.mapped},setMapped:function(a){this.mapped=a},isLinked:function(){return this.linked},setLinked:function(a){this.linked=a},getLinkStyle:function(){return this.linkStyle},setLinkStyle:function(a){this.linkStyle=a},getReactionStyle:function(){return this.reactionStyle},setReactionStyle:function(a){this.reactionStyle=a},getD3Data:function(){return this.d3Data},setD3Data:function(a){this.d3Data=a},getForce:function(){return this.force},setForce:function(a){this.force=a},getForceCentroids:function(){return this.forceCentroids},setForceCentroids:function(a){this.forceCentroids=a},getNodesMap:function(){if(this.nodesMap==undefined){this.nodesMap=new Object()}return this.nodesMap},removeSelectedNode:function(c){var b=false;var a=0;while(!b){if(this.selectedNodes[a]==c){this.selectedNodes.splice(a,1);b=true}a++}},removeAllSelectedNodes:function(){while(this.selectedNodes.length>0){this.selectedNodes.pop()}},getSelectedNodes:function(){return this.selectedNodes},removeDuplicatedNode:function(c){var b=false;var a=0;while(!b){if(this.duplicatedNodes[a]==c){this.duplicatedNodes.splice(a,1);b=true}a++}},removeAllDuplicatedNodes:function(){while(this.duplicatedNodes.length>0){this.duplicatedNodes.pop()}},getDuplicatedNodes:function(){return this.duplicatedNodes},getDuplicatedNodesCount:function(){return this.duplicatedNodes.length},removeReaction:function(c){var b=false;var a=0;while(!b){if(this.getReactions()[a].id==c){this.getReactions().splice(a,1);b=true}a++}},removeMetabolite:function(b){var c=false;var a=0;while(!c){if(this.getMetabolites()[a].id==b){this.getMetabolites().splice(a,1);c=true}a++}},getReactions:function(){return this.reactions},getMetabolites:function(){return this.metabolites},emptyReactions:function(){this.reactions=[]},emptyMetabolites:function(){this.metabolites=[]},setVizEngine:function(a){this.vizEngine=a},getVizEngine:function(){return this.vizEngine}};