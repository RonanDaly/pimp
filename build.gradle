class PrintExec extends Exec {
	PrintExec() {
		ignoreExitValue true
		workingDir '.'
		setStandardOutput(new ByteArrayOutputStream())
		setErrorOutput(new ByteArrayOutputStream())
		doLast {
			println commandLine.join(" ")
			try {
				execResult.assertNormalExitValue()
			} catch (Exception e) {
				println e.getMessage()
				println standardOutput.toString()
				println errorOutput.toString()
				throw e
			}
		}
	}

	protected void exec() {
		try {
			super.exec()
		} catch (Exception e) {
			println 'Problem running program, error messages follow'
			println '---'
			Throwable t = e
			while (t != null) {
				println t.getMessage()
				t = t.getCause();
			}
			println '---'
			throw e
		}
	}
}

def checkProperties() {
	for ( prop in ['PIMP_RSCRIPT_PATH'] ) {
		if ( project.ext.props[prop] == null ) {
			throw new Exception('Property ' + prop + ' is not set in the configuration file')
		}
	}
}

task setupProjectProperties {
	Properties props = new Properties()
	props.load(new FileInputStream('django_projects/pimp/.env'))
	project.ext.props = props
	checkProperties()
	project.ext.props['PATH'] = 'venv/bin' + ':' + "$System.env.PATH"
}

/*
task setPythonVersion(type: PrintExec, dependsOn: setupProjectProperties) {
	commandLine project.ext.props.Python, 'getPythonVersion.py'
	doLast {
		project.ext.PythonVersion = standardOutput.toString()
	}
}

task setJavaVersion(type: PrintExec, dependsOn: setupProjectProperties) {
	commandLine project.ext.props.Java, '-cp', '.', 'GetJavaVersion'
	doLast {
		project.ext.JavaVersion = standardOutput.toString()
	}
}

task setRVersion(type: PrintExec, dependsOn: setupProjectProperties) {
	commandLine project.ext.props.Rscript, 'getRVersion.R'
	doLast {
		project.ext.RVersion = standardOutput.toString()
	}
}

task checkVersions(dependsOn: [setPythonVersion, setRVersion, setJavaVersion]) << {
	println 'R Version: ' + project.ext.RVersion
	println 'Python Version: ' + project.ext.PythonVersion
	println 'Java Version: ' + project.ext.JavaVersion
}

task copyRpkg (type: Copy) {
        from('PiMP') {
		into 'PiMP'
	}
        from('PiMPDB') {
		into 'PiMPDB'
	}
	into 'build'
}

task createPiMP(type: Exec, dependsOn: [copyRpkg, setupProjectProperties]) {
        workingDir 'build'
        commandLine project.ext.props.R, 'CMD', 'build',  'PiMP'
}

task createPiMPDB(type: Exec, dependsOn: [copyRpkg, setupProjectProperties]) {
        workingDir 'build'
        commandLine project.ext.props.R, 'CMD', 'build',  'PiMPDB'
}
*/
task createVirtualEnvironment(type: PrintExec) {
	onlyIf {
		! file('venv').exists()
	}
	commandLine 'python', 'virtualenv/virtualenv.py', '--python=python2.7', 'venv'
}

task installPiMPRequirements(type: Exec, dependsOn: createVirtualEnvironment) {
	commandLine 'venv/bin/pip', 'install', '-r', 'django_projects/requirements.txt'
}

task installFrankRequirements(type: Exec, dependsOn: createVirtualEnvironment) {
	commandLine 'venv/bin/pip', 'install', '-r', 'django_projects/requirements_frank.txt'
}

task installPiMPPythonDependencies(dependsOn: [installPiMPRequirements, installFrankRequirements])

task installPiMPRDependencies(type: Exec, dependsOn: setupProjectProperties) {
	commandLine project.ext.props.PIMP_RSCRIPT_PATH, 'setupR.R', '--args', '--bootstrap-packrat'
}

task installPiMPDependencies(dependsOn: [installPiMPPythonDependencies, installPiMPRDependencies])

task synchroniseDatabase(type: Exec, dependsOn: [installPiMPPythonDependencies, setupProjectProperties]) {
	//println project.ext.props.PATH
	environment 'PATH', project.ext.props['PATH']
	commandLine 'venv/bin/honcho', '-e', 'django_projects/pimp/.env', 'run', 'venv/bin/python2.7', 'django_projects/pimp/manage.py', 'migrate'
}
/*
task populatePiMP (type: Exec, dependsOn: [installPiMPPythonDependencies, setupProjectProperties, synchroniseDatabase]) {
	environment 'PATH', project.ext.props['PATH']
	commandLine 'venv/bin/honcho', '-e', 'django_projects/pimp/.env', 'run', 'venv/bin/python2.7', 'django_projects/pimp/manage.py', 'populate_parameters'
}
*/
task createSuperUser(dependsOn: [installPiMPPythonDependencies, setupProjectProperties, populatePiMP]) << {
	def command =  ['venv/bin/honcho', '-e', 'django_projects/pimp/.env', 'run', 'venv/bin/python2.7', '-u', 'django_projects/pimp/setupInitialUser.py']
	def proc = new ProcessBuilder(command)
        	.redirectOutput(ProcessBuilder.Redirect.INHERIT)
        	.redirectInput(ProcessBuilder.Redirect.INHERIT)
        	.redirectError(ProcessBuilder.Redirect.INHERIT)
        	.start()

    	proc.waitFor()
}

task setupPiMP(dependsOn: [synchroniseDatabase, createSuperUser])

task installPiMP(dependsOn: [installPiMPDependencies, setupPiMP])

task runPiMP(type: Exec) {
	environment 'PATH', project.ext.props['PATH']
	workingDir 'django_projects/pimp'
	commandLine '../../venv/bin/honcho', 'start'
}
